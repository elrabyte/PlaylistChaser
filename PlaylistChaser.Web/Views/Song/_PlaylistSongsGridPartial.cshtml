@using PlaylistChaser.Web.Models.SearchModel;
@using PlaylistChaser.Web.Models.ViewModel;
@using PlaylistChaser.Web.Util;
@using static PlaylistChaser.Web.Util.BuiltInIds;
@model PlaylistSongSearchModel

@{
    var sources = (List<Source>)ViewBag.Sources;
}

<div class="float-end">
    <div class="dropdown">
        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="bi bi-gear"></i>
        </button>
        <ul class="dropdown-menu">
            @foreach (var src in sources)
            {
                <li>
                    <span class="dropdown-header">@Html.Raw(src.DisplayName)</span>
                </li>
                <li><a class="dropdown-item" href="javascript:;" onclick="findAllSongs('@src.Id')">Find all songs</a></li>
                <li><a class="dropdown-item" href="javascript:;" onclick="findSelectedSongs('@src.Id')">Find selected songs</a></li>
            }
        </ul>
    </div>
</div>

@Partials.ReloadablePartial("playlistSongsGrid", Url.Url("_PlaylistSongsGridDataPartial", "Song", new { PlaylistId = Model.PlaylistId }))
@Partials.ModalPartial("songInfosEdit","Edit Songinfos", Url.Url("_SongInfosEditPartial", "Song"))

<script type="text/javascript">

    $(function () {
        changePage(1);
    })
    var addSongStates = @(ViewBag.AddSongStates.ToString().ToLower());

    var pageNumber;
    function changePage(pageNum) {
        pageNumber = pageNum;
        //change active buttons
        $(".page-btn").removeClass("active");
        $("#page" + pageNum + "Btn").addClass("active");
        searchSongs();
    }

    function loadPlaylistSongsGrid(addSongStates, skip, pageSize, searchModel) {
        playlistSongsGrid.load("&addSongStates=" + addSongStates + "&skip=" + skip + "&pageSize=" + pageSize + "&seachModel=" + searchModel);
    }

    function searchSongs() {
        let pageSize = $("#PageSize").val();
        let skip = pageSize * (pageNumber - 1);
        loadPlaylistSongsGrid(addSongStates, skip, pageSize, $("#searchForm").serialize());
    }
</script>

<!--#region dropdown actions-->
<script type="text/javascript">
    function getSelectedIds() {
        return $.map($("table tr.selected"), function (selectedRow) {
            return $(selectedRow).data('id');
        });
    }

    function findAllSongs(source) {
        let url = '@Url.Url("FindSongs", "Song", new {playlistId = Model.PlaylistId})'
        $.post(url, { source: source }, function (data, status, jqXHR) {
            searchSongs();
        });
    }

    function findSelectedSongs(source) {
        let selectedIds = getSelectedIds();
        if (selectedIds.length <= 0) {
            return alert("no rows selected")
        }
        let url = '@Url.Url("FindSongs", "Song")';
        $.post(url, { source: source, songIds: selectedIds.toString() }, function (data, status, jqXHR) {
            searchSongs();
        });
    }
</script>
<!--#endregion-->
<!--#region dropdown actions-->
<script type="text/javascript">
    function playlistSongsGrid_dblCliked(row, element, field) {
        let songId = element._data.id;
        songInfosEdit.show("?songId=" + songId);
    }
</script>
<!--#endregion-->