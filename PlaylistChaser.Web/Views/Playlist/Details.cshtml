@using PlaylistChaser.Web.Models.SearchModel;
@using PlaylistChaser.Web.Util;
@using static PlaylistChaser.Web.Util.BuiltInIds;
@model PlaylistDetailsModel
@{
    ViewData["Title"] = "Details";
    var sources = (List<(Sources source, string icon)>)ViewBag.Sources;
    var selectedSource = (Sources)ViewBag.SelectedSource;
}

<script type="text/javascript">
    function syncSongsThumbnail() {
        let url = "/Playlist/SyncSongsThumbnail/@Model.Playlist.Id";
        let btn = $("#syncSongsThumbnailBtn");
        ajaxCall(url, btn);
    }
    function syncPlaylistFrom() {
        let url = "/Playlist/SyncPlaylistFrom/@Model.Playlist.Id";
        let btn = $("#syncPlaylistFromBtn");
        ajaxCall(url, btn);
    }
    function syncPlaylistTo() {
        let url = "/Playlist/SyncPlaylistTo/@Model.Playlist.Id";
        let btn = $("#syncPlaylistToBtn");
        ajaxCall(url, btn);
    }
    function deletePlaylistAtSource() {
        let url = "/Playlist/DeletePlaylistAtSource/@Model.Playlist.Id";
        let btn = $("#deletePlaylistAtSourceBtn");
        ajaxCall(url, btn);
    }
    function deletePlaylistLocal() {
        let url = "/Playlist/DeletePlaylistLocal/@Model.Playlist.Id";
        let btn = $("#deletePlaylistLocalBtn");
        ajaxCall(url, btn, function () { window.location.replace("/Playlist") });
    }

    function ajaxCall(url, btn, onSuccessFunc) {
        if (url == null || btn == null)
            return alert("url or button not set");

        disableButtonRow();
        disableButton(btn);
        let source = getSelectedSource();

        $.ajax({
            type: "POST",
            url: url,
            data: { source: source },
            success: function (data) {
                if (!data.success) {
                    enableButtonRow();
                    enableButton(btn);
                    return alert(data.message)
                }
                if (onSuccessFunc == null)
                    location.reload();
                else
                    onSuccessFunc();
            },
            dataType: "json"
        });
    }

    function disableButtonRow() {
        $("#btn-header-row .btn").addClass("disabled");
    }

    function enableButtonRow() {
        $("#btn-header-row .btn").removeClass("disabled");
    }

    function disableButton(btn) {
        $(btn).addClass("disabled");
        btn.append('<div class="loading-spinner spinner-border ml-auto" role="status" aria-hidden="true"></div>');
    }
    function enableButton(btn) {
        btn.removeClass("disabled");
        btn.find(".loading-spinner").remove();
    }

    function getSelectedSource() {
        return $("#sourceSelector").val();
    }
</script>

<div class="row">
    <div class="col-2">
        <div class="form-floating">
            <select class="form-select" id="sourceSelector" aria-label="Floating label select example">
                @foreach (var src in sources)
                {
                    var srcId = (int)src.source;
                    var srcName = src.source.ToString();
                    var html = $@"<option value=""{srcId}"">{srcName}</option>";
                    @Html.Raw(html)
                }
            </select>
            <label for="sourceSelector">Select Source</label>
        </div>
    </div>
</div>

<div class="btn disabled" id="sourceIcon"></div>
<div class="btn-group" role="group" aria-label="Button group with nested dropdown">
    <div class="btn-group" role="group">
        <button id="btnGroupSync" type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" aria-describedby="basic-addon1">
            Sync Playlist
        </button>
        <div class="dropdown-menu" aria-labelledby="btnGroupSync">
            <a id="syncPlaylistFromBtn" class="dropdown-item" href="javascript:;" onclick="syncPlaylistFrom()">Sync Playlist From Source</a>
            <a id="syncPlaylistToBtn" class="dropdown-item" href="javascript:;" onclick="syncPlaylistTo()">Sync Playlist To Source</a>
        </div>
    </div>
    @Controls.Button("Sync Songs-Thumbnail From Source","syncSongsThumbnail()","syncSongsThumbnailBtn", "btn-secondary")
    <div class="btn-group" role="group">
        <button id="btnGroupDelete" type="button" class="btn btn-danger dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
            Delete Playlist
        </button>
        <div class="dropdown-menu" aria-labelledby="btnGroupDelete">
            <a id="deletePlaylistAtSourceBtn" class="dropdown-item" href="javascript:;" onclick="deletePlaylistAtSource()">Delete Playlist At Source</a>
            <a id="deletePlaylistLocalBtn" class="dropdown-item" href="javascript:;" onclick="deletePlaylistLocal()">Delete Playlist Local</a>
        </div>
    </div>
</div>

@Helper.ModalPartial("playlistEdit", Helper.Url(Url,"_EditPartial", "Playlist", new { id = Model.Playlist.Id }))

<h4>Playlist</h4>
<div class="row">
    <div class="col-md-10">
        <div class="form-group row">
            @Html.BsLabelFor(m => m.Playlist.Name)
            <div class="col-sm-10">
                @Html.BsDisplayFor(m => m.Playlist.Name)
            </div>
        </div>
        <div class="form-group row">
            @Html.BsLabelFor(m => m.Playlist.Description)
            <div class="col-sm-10">
                @Html.BsDisplayFor(m => m.Playlist.Description)
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col">
        <h5>Songs</h5>
        <div class="row">
            @Html.BsLabelFor(m => m.Playlist.SongsTotal)
            @Html.BsDisplayFor(m => m.Playlist.SongsTotal)
        </div>
        @await Component.InvokeAsync("SongsGrid", new { playlistId = Model.Playlist.Id, addSongStates = Model.AddSongStates })
    </div>
</div>

<script type="text/javascript">
    $(function(){
        $("#sourceSelector").val(@((int)selectedSource)).change()
    })
    const sourcesJs = [@Html.Raw(string.Join(',', sources.Select(s => "{ id:'" + (int)s.source + "', icon:\"" + s.icon + "\"}").ToList()))];
    $("#sourceSelector").on("change", function (s, e) {
        let source = sourcesJs.find(({ id }) => id == s.target.value);
        $("#sourceIcon").html(source.icon);
    })
</script>