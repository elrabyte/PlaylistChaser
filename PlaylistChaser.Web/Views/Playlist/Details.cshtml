@using PlaylistChaser.Web.Models.SearchModel;
@using PlaylistChaser.Web.Util;
@using static PlaylistChaser.Web.Util.BuiltInIds;
@model PlaylistDetailsModel
@{
    ViewData["Title"] = "Details";
    var sources = (List<Source>)ViewBag.Sources;
}

<script type="text/javascript">
    function syncSongsThumbnail(source) {
        let url = "/Playlist/SyncSongsThumbnail/@Model.Playlist.Id";
        let btn = $("#syncSongsThumbnailBtn");
        ajaxCall(url, btn, source);
    }
    function syncPlaylistFrom(source) {
        let url = "/Playlist/SyncPlaylistFrom/@Model.Playlist.Id";
        let btn = $("#syncPlaylistFromBtn");
        ajaxCall(url, btn, source);
    }
    function syncPlaylistTo(source) {
        let url = "/Playlist/SyncPlaylistTo/@Model.Playlist.Id";
        let btn = $("#syncPlaylistToBtn");
        ajaxCall(url, btn, source);
    }
    function deletePlaylistAtSource(source) {
        let url = "/Playlist/DeletePlaylistAtSource/@Model.Playlist.Id";
        let btn = $("#deletePlaylistAtSourceBtn");
        ajaxCall(url, btn, source);
    }
    function deletePlaylistLocal() {
        let url = "/Playlist/DeletePlaylistLocal/@Model.Playlist.Id";
        let btn = $("#deletePlaylistLocalBtn");
        ajaxCall(url, btn, null, function () { window.location.replace("/Playlist") });
    }

    function ajaxCall(url, btn, source, onSuccessFunc) {
        if (url == null || btn == null)
            return alert("url or button not set");

        disableButtonRow();
        disableButton(btn);

        $.ajax({
            type: "POST",
            url: url,
            data: { source: source },
            success: function (data) {
                if (!data.success) {
                    enableButtonRow();
                    enableButton(btn);
                    return alert(data.message)
                }
                if (typeof onSuccessFunc === 'undefined')
                    location.reload();
                else
                    onSuccessFunc();
            },
            dataType: "json"
        });
    }

    function disableButtonRow() {
        $("#btn-header-row .btn").addClass("disabled");
    }

    function enableButtonRow() {
        $("#btn-header-row .btn").removeClass("disabled");
    }

    function disableButton(btn) {
        $(btn).addClass("disabled");
        btn.append('<div class="loading-spinner spinner-border ml-auto" role="status" aria-hidden="true"></div>');
    }
    function enableButton(btn) {
        btn.removeClass("disabled");
        btn.find(".loading-spinner").remove();
    }
</script>

<!--Buttons-->
<div id="btn-header-row" class="btn-group" role="group" aria-label="Button group with nested dropdown">
    <!--Sync Playlist-->
    <div class="btn-group">
        <button type="button" class="btn btn-primary" onclick="syncPlaylistFrom('@Model.Playlist.MainSourceId')">
            <i class="bi bi-cloud-download"></i> Sync Playlist
        </button>
    </div>

    <!--Sync Playlist To-->
    <div class="btn-group" role="group">
        <button id="btnGroupSync" type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="bi bi-cloud-upload"></i> Sync Playlist To
        </button>
        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="btnGroupSync">
            @foreach (var source in sources)
            {
                <a class="dropdown-item" href="javascript:;" onclick="syncPlaylistTo('@source.Id')">@Html.Raw(source.IconHtml) @source.Name</a>
            }
        </div>
    </div>
    <!--Sync Songs-Thumbnail From-->
    <div class="btn-group" role="group">
        <button id="btnGroupSync" type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="bi bi-file-arrow-down"></i> Sync Songs-Thumbnail From
        </button>
        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="btnGroupSync">
            @foreach (var source in sources)
            {
                <a class="dropdown-item" href="javascript:;" onclick="syncSongsThumbnail('@source.Id')">@Html.Raw(source.IconHtml) @source.Name</a>
            }
        </div>
    </div>
    <!--Delete Playlist-->
    <div class="btn-group" role="group">
        <button id="btnGroupDelete" type="button" class="btn btn-danger dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="bi bi-trash"></i> Delete Playlist
        </button>
        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="btnGroupDelete">
            <a id="deletePlaylistLocalBtn" class="dropdown-item" href="javascript:;" onclick="deletePlaylistLocal()">Delete Playlist Local</a>
            <hr class="dropdown-divider">
            @foreach (var source in sources)
            {
                <a class="dropdown-item" href="javascript:;" onclick="deletePlaylistAtSource('@source.Id')">@Html.Raw(source.IconHtml) @source.Name</a>
            }
        </div>
    </div>
</div>

<h4>Playlist @Controls.Button("Edit","editPlaylist()",iconName:"pencil-square")</h4>

<div class="row">
    <div class="col-md-10">
        <div class="form-group row">
            @Html.BsLabelFor(m => m.Playlist.Name)
            <div class="col-sm-10">
                @Html.BsDisplayFor(m => m.Playlist.Name)
            </div>
        </div>
        <div class="form-group row">
            @Html.BsLabelFor(m => m.Playlist.Description)
            <div class="col-sm-10">
                @Html.BsDisplayFor(m => m.Playlist.Description)
            </div>
        </div>
    </div>
</div>

<hr />
<div class="row">
    @Helper.ReloadablePartial("playlistSongsStatesDetails",Helper.Url(Url,"_PlaylistSongStatesSummaryPartial", "Playlist", new { id = Model.Playlist.Id }), true)
</div>

<div class="row">
    @Helper.ReloadablePartial("playlistSongsGridPartial",Url.Url("_PlaylistSongsGridPartial","Song", new { playlistId = Model.Playlist.Id, addSongStates = Model.AddSongStates }),true)
</div>


@Helper.ModalPartial("playlistEdit", "Edit Playlist", Helper.Url(Url,"_EditPartial", "Playlist", new { id = Model.Playlist.Id }))

<script type="text/javascript">
    playlistEdit.on("saved", function () {
        location.reload();
    })

    function editPlaylist() {
        playlistEdit.show();
    }
</script>