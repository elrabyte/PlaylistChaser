@using PlaylistChaser.Web.Models.SearchModel;
@using static PlaylistChaser.Web.Util.BuiltInIds;
@model PlaylistDetailsModel
@{
    ViewData["Title"] = "Details";
    var sources = (Sources[])Enum.GetValues(typeof(Sources));
}

<script type="text/javascript">
    function syncSongsThumbnail() {
        let url = "/Playlist/SyncSongsThumbnail/@Model.Playlist.PlaylistId";
        let btn = $("#syncSongsThumbnailBtn");
        ajaxCall(url, btn);
    }
    function syncPlaylistFrom() {
        let url = "/Playlist/SyncPlaylistFrom/@Model.Playlist.PlaylistId";
        let btn = $("#syncPlaylistFromBtn");
        ajaxCall(url, btn);
    }
    function syncPlaylistTo() {
        let url = "/Playlist/SyncPlaylistTo/@Model.Playlist.PlaylistId";
        let btn = $("#syncPlaylistToBtn");
        ajaxCall(url, btn);
    }
    function deletePlaylistAtSource() {
        let url = "/Playlist/DeletePlaylistAtSource/@Model.Playlist.PlaylistId";
        let btn = $("#deletePlaylistAtSourceBtn");
        ajaxCall(url, btn);
    }
    function deletePlaylistLocal() {
        let url = "/Playlist/DeletePlaylistLocal/@Model.Playlist.PlaylistId";
        let btn = $("#deletePlaylistLocalBtn");
        ajaxCall(url, btn, function () { window.location.replace("/Playlist") });
    }

    function ajaxCall(url, btn, onSuccessFunc) {
        if (url == null || btn == null)
            return alert("url or button not set");

        disableButtonRow();
        disableButton(btn);
        let source = getSelectedSource();

        $.ajax({
            type: "POST",
            url: url,
            data: { source: source },
            success: function (data) {
                if (!data.success) {
                    enableButtonRow();
                    enableButton(btn);
                    return alert(data.message)
                }
                if (onSuccessFunc == null)
                    location.reload();
                else
                    onSuccessFunc();
            },
            dataType: "json"
        });
    }

    function disableButtonRow() {
        $("#btn-header-row .btn").addClass("disabled");
    }

    function enableButtonRow() {
        $("#btn-header-row .btn").removeClass("disabled");
    }

    function disableButton(btn) {
        $(btn).addClass("disabled");
        btn.append('<div class="loading-spinner spinner-border ml-auto" role="status" aria-hidden="true"></div>');
    }
    function enableButton(btn) {
        btn.removeClass("disabled");
        btn.find(".loading-spinner").remove();
    }

    function getSelectedSource() {
        return $("#sourceSelector").val();
    }
</script>


<select id="sourceSelector" class="form-select" aria-label="Select Source">
    @foreach (var src in sources)
    {
        @Html.Raw("<option "+ (src == Sources.Youtube ? "selected" : "") + " value=\""+src.ToString()+"\">"+src.ToString()+"</option>")
    }
</select>


<h4>Playlist</h4>
<div class="row">
    <div class="col-md-10">
        <div class="form-group row">
            @Html.LabelFor(m => m.Playlist.Name)
            @Html.DisplayFor(m => m.Playlist.Name)
        </div>
        <div class="form-group row">
            @Html.LabelFor(m => m.Playlist.Description)
            @Html.DisplayFor(m => m.Playlist.Description)
        </div>

        <div id="btn-header-row" class="btn-group btn-group-lg" role="group" aria-label="Control group">
            <a id="syncPlaylistFromBtn" href="javascript:;" onclick="syncPlaylistFrom()" class="btn btn-primary">
                Sync Playlist From Source
            </a>
            <a id="syncPlaylistToBtn" href="javascript:;" onclick="syncPlaylistTo()" class="btn btn-primary">
                Sync Playlist To Source
            </a>
            <a id="syncSongsThumbnailBtn" href="javascript:;" onclick="syncSongsThumbnail()" class="btn btn-primary">
                Sync Songs-Thumbnail From Source
            </a>
            <a id="deletePlaylistAtSourceBtn" href="javascript:;" onclick="deletePlaylistAtSource()" class="btn btn-primary">
                Delete Playlist At Source
            </a>
            <a id="deletePlaylistLocalBtn" href="javascript:;" onclick="deletePlaylistLocal()" class="btn btn-primary">
                Delete Playlist Local
            </a>
        </div>
    </div>
</div>
<div class="row">
    <div class="col">
        <h5>Songs</h5>
        @await Component.InvokeAsync("SongsGrid", new { playlistId = Model.Playlist.PlaylistId, addSongStates = Model.AddSongStates })
    </div>
</div>